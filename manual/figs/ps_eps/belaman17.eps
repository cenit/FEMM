%!PS-Adobe-3.0 EPSF-3.0
%%Creator: (Word2TeX)
%%Title: (C:\download\bela10src\manual\latex\belaman17.eps)
%%CreationDate: (Tue Sep 02 09:46:28 2003)
%%BoundingBox: 0 0 93 22
%%DocumentData: Clean7Bit
%%LanguageLevel: 1
%%Pages: 1
%%EndComments

%%BeginDefaults
%%PageOrientation: Portrait
%%EndDefaults

%%BeginProlog
%
% Display a color image.  The image is displayed in color on
% Postscript viewers or printers that support color, otherwise
% it is displayed as grayscale.
%
/buffer 512 string def
/byte 1 string def
/color_packet 3 string def
/pixels 768 string def

/DirectClassPacket
{
  %
  % Get a DirectClass packet.
  %
  % Parameters:
  %   red.
  %   green.
  %   blue.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  compression 0 gt
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/DirectClassImage
{
  %
  % Display a DirectClass image.
  %
  systemdict /colorimage known
  {
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { DirectClassPacket } false 3 colorimage
  }
  {
    %
    % No colorimage operator;  convert to grayscale.
    %
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { GrayDirectClassPacket } image
  } ifelse
} bind def

/GrayDirectClassPacket
{
  %
  % Get a DirectClass packet;  convert to grayscale.
  %
  % Parameters:
  %   red
  %   green
  %   blue
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 gt
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/GrayPseudoClassPacket
{
  %
  % Get a PseudoClass packet;  convert to grayscale.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 gt
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassPacket
{
  %
  % Get a PseudoClass packet.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  compression 0 gt
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassImage
{
  %
  % Display a PseudoClass image.
  %
  % Parameters:
  %   class: 0-PseudoClass or 1-Grayscale.
  %
  currentfile buffer readline pop
  token pop /class exch def pop
  class 0 gt
  {
    currentfile buffer readline pop
    token pop /depth exch def pop
    /grays columns 8 add depth sub depth mul 8 idiv string def
    columns rows depth
    [
      columns 0 0
      rows neg 0 rows
    ]
    { currentfile grays readhexstring pop } image
  }
  {
    %
    % Parameters:
    %   colors: number of colors in the colormap.
    %   colormap: red, green, blue color packets.
    %
    currentfile buffer readline pop
    token pop /colors exch def pop
    /colors colors 3 mul def
    /colormap colors string def
    currentfile colormap readhexstring pop pop
    systemdict /colorimage known
    {
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { PseudoClassPacket } false 3 colorimage
    }
    {
      %
      % No colorimage operator;  convert to grayscale.
      %
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { GrayPseudoClassPacket } image
    } ifelse
  } ifelse
} bind def

/DisplayImage
{
  %
  % Display a DirectClass or PseudoClass image.
  %
  % Parameters:
  %   x & y translation.
  %   x & y scale.
  %   label pointsize.
  %   image label.
  %   image columns & rows.
  %   class: 0-DirectClass or 1-PseudoClass.
  %   compression: 0-RunlengthEncodedCompression or 1-NoCompression.
  %   hex color packets.
  %
  gsave
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  x y translate
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  currentfile buffer readline pop
  token pop /pointsize exch def pop
  /Helvetica findfont pointsize scalefont setfont
  x y scale
  currentfile buffer readline pop
  token pop /columns exch def
  token pop /rows exch def pop
  currentfile buffer readline pop
  token pop /class exch def pop
  currentfile buffer readline pop
  token pop /compression exch def pop
  class 0 gt { PseudoClassImage } { DirectClassImage } ifelse
  grestore
} bind def
%%EndProlog
%%Page:  1 1
%%PageBoundingBox: 0 0 94 23
userdict begin
%%BeginData:
DisplayImage
0 0
94 23
12.000000
94 23
1
0
0
7
c0c0c0
ffffff
000000
808080
ffff00
ff00ff
800080
005d01160200011502000115020001150200000001010013030002000100001303000200
010000130300020001000013030002000000010100130300020001000013030002000100
0013030002000100001303000200000001010002040e00010300020001000002020e0001
0300020001000002020e0001030002000100001303000200000001010002040100040401
000404000001030002000100000202000000020000020200000202000002020000010300
020001000002020105050200010402000001030002000100000302050009030002000000
010100020400000004000003040000000400000304000001030002000100000202000001
020000020200000202000001020000010300020001000002020005000200050502000103
020000010300020001000003020500090300020000000101000204000001040000020400
000104000002040000010300020001000002020000020200000202000002020000000200
000103000200010000020200050102000505020001020200000103000200010000030203
000b03000200000001010002040000020400000104000002040000010400000103000200
010000020201000202000002020000020201000103000200010000020200050202000505
020001010200000103000200010000030204000a03000200000001010002040000030400
000004000003040000000400000103000200010000020200000002000002020000020200
000202000001030002000100000202000503020005050200010002000001030002000100
000302010000020200090300020000000101000204000004040100040401000103000200
010000020200000102000002020000020200000102000001030002000100000202000504
02000505020100010300020001000003020100010202000803000200000001010002040e
000103000200010000020200000202000002020000020200000002000001030002000100
000202000505020005050200000103000200010000080202000703000200000001010002
040100040401000404000001030002000100000202010002020000020200000202010001
030002000100000202010505020005040200000103000200010000090202000603000200
000001010002040000000400000304000000040000030400000103000200010000020200
000002000002020000020200000202000001030002000100000202000600020005050200
050302000001030002000100000a02020005030002000000010100020400000104000002
040000010400000204000001030002000100000202000001020000020200000202000001
02000001030002000100000202000601020005050200050202000001030002000100000b
020200040300020000000101000204000002040000010400000204000001040000010300
020001000002020000020200000202000002020000000200000103000200010000020200
0602020005050200050102000001030002000100000c0202000303000200000001010002
040000030400000004000003040000000400000103000200010000020201000202000002
020000020201000103000200010000020200060302000505020005000200000103000200
0100000d0201000303000200000001010002040000040401000404010001030002000100
000202000000020000020200000202000002020000010300020001000002020006040200
050502010001030002000100001303000200000001010002040e00010300020001000002
020e00010300020001000002020e00010300020001000013030002000000010100130300
020001000013030002000100001303000200010000130300020000000101001303000200
010000130300020001000013030002000100001303000200000001010314020001000314
02000100031402000100031402000000025c0000
%%EndData
end
%%PageTrailer
%%Trailer
%%EOF
